import { DeviceService } from './DeviceService';
import { ConsoleService } from './ConsoleService';
import { FirmwareService } from './FirmwareService';
import { FlashService } from './FlashService';

const bootFileName: string = "main.py";
const bootSavePrefix: string = `with open('${bootFileName}', 'w') as f:\n    f.write('''\n`;
const bootSaveSuffix: string = "\n''')\n";

export class ServiceContainer {

  private _deviceService: DeviceService;
  private _consoleService: ConsoleService;
  private _firmwareService: FirmwareService;
  private _flashService: FlashService;

  constructor(devService?: DeviceService | null) {
    // If a DeviceService instance is passed (and is not null), use it; otherwise, create a new one.
    this._deviceService = devService || new DeviceService();
    this._consoleService = new ConsoleService(this._deviceService);
    this._firmwareService = new FirmwareService(this._deviceService);
    
    this._flashService = new FlashService(
      this._deviceService,
      this._consoleService,
      this._firmwareService
    );
  }

  // Perform any asynchronous initialization for any of the services here.
  public async init(): Promise<void> {
    // We have to wait for the asynchronous init of the firmware service to complete before we can use it in the flash service.
    await this._firmwareService.init();
  }

  public get deviceService(): DeviceService {
    return this._deviceService;
  }

  public get consoleService(): ConsoleService {
    return this._consoleService;
  }

  public get firmwareService(): FirmwareService {
    return this._firmwareService;
  }

  public get flashService(): FlashService {
    return this._flashService;
  }
  
  public async saveCodeToDevice(
    codeToSave: string,
    stream: (content: string) => void
  ): Promise<{ status: string; execution_count: number; ename?: string; evalue?: string; traceback?: string[] }> {
    if (!codeToSave) {
      return {
        status: 'error',
        execution_count: 0,
        ename: 'ValueError',
        evalue: 'No code provided to save',
        traceback: ['Please provide code to save after the %save% command']
      };
    }
    
    const bootCode = `# This code is automatically generated by the Embedded Kernel\n${codeToSave}`;
    const bootCodeWithSave = `${bootSavePrefix}${bootCode}${bootSaveSuffix}`;

    if (!this._deviceService.getTransport()) {
      console.log(`[ServiceContainer] saveCodeToDevice - No transport available for saving`);
      return {
        status: 'error',
        execution_count: 0,
        ename: 'TransportError',
        evalue: 'No transport available to save code',
        traceback: ['Please connect a device first']
      };
    }

    const result = await this._consoleService.executeCommand(bootCodeWithSave, stream);
    
    if (!result.success) {
      console.log("[ServiceContainer] saveCodeToDevice - Command execution failed:", result.error);
      return {
        status: 'error',
        execution_count: 0,
        ename: 'ExecutionError',
        evalue: result.error || 'Unknown error',
        traceback: [result.error || 'Unknown error']
      };
    }
    
    console.log(`[ServiceContainer] saveCodeToDevice - Code saved successfully`);
    return {
      status: 'ok',
      execution_count: 0,
      user_expressions: {},
    };
  }
}
